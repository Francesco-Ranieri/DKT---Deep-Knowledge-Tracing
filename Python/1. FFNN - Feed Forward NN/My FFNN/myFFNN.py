# -*- coding: utf-8 -*-
"""FFNN - 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13PpPGmnS5lP9ePG9W5c6lvzCXiceYWkw
"""

import tensorflow as tf 
import sklearn as sl
import tensorflow.keras.layers as KL
import numpy as np 
import matplotlib.pyplot as plt

from keras.utils.vis_utils import plot_model

from sklearn.model_selection import train_test_split
from sklearn.datasets import make_blobs
from matplotlib import pyplot
from pandas import DataFrame

dataset = np.random.uniform(size = (100000,100))
dataset.shape
#print(dataset[0])

classes = np.random.randint(10, size=100000)
print(classes)

x_train, x_test, y_train, y_test = train_test_split(dataset, classes)
print("x_train",x_train.shape)
print("x_test",x_test.shape)

# create input layer
inputs = KL.Input(shape=100)                            #(None, 100000, 100)
# flatten the inputs
#first_layer = KL.Flatten()(inputs)                     #(None, 1000000)

first_layer = KL.Dense(512, activation=tf.nn.relu)(inputs)            #(None, 512)

second_layer = KL.Dense(256, activation=tf.nn.relu)(first_layer)

outputs = KL.Dense(10, activation=tf.nn.softmax)(second_layer)         #(None, 10)

# print tensor shape
print ("layer 0", inputs.shape)               #input layer
print("layer 1", first_layer.shape)           #hidden layer 1
print ("layer 2", second_layer.shape)         #hidden layer 2
print ("output", outputs.shape)               #output layer

#create model (in, out)
model = tf.keras.models.Model(inputs, outputs)
model.summary()

plot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)

model.compile(optimizer="adam", loss="sparse_categorical_crossentropy", metrics=["accuracy"])
print(x_test)
model.fit(x_train, y_train, epochs=50)
test_loss, test_acc = model.evaluate(x_test, y_test)
print("Test Loss: {0} - Test Acc: {1}".format(test_loss, test_acc))